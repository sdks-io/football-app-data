<?php

declare(strict_types=1);

/*
 * SoccerV3ScoresLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SoccerV3ScoresLib\Models;

use stdClass;

class PlayoffAggregateScore implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $teamAId;

    /**
     * @var int|null
     */
    private $teamAAggregateScore;

    /**
     * @var int|null
     */
    private $teamBId;

    /**
     * @var int|null
     */
    private $teamBAggregateScore;

    /**
     * @var int|null
     */
    private $winningTeamId;

    /**
     * @var string|null
     */
    private $created;

    /**
     * @var string|null
     */
    private $updated;

    /**
     * Returns Team a Id.
     */
    public function getTeamAId(): ?int
    {
        return $this->teamAId;
    }

    /**
     * Sets Team a Id.
     *
     * @maps TeamA_Id
     */
    public function setTeamAId(?int $teamAId): void
    {
        $this->teamAId = $teamAId;
    }

    /**
     * Returns Team a Aggregate Score.
     */
    public function getTeamAAggregateScore(): ?int
    {
        return $this->teamAAggregateScore;
    }

    /**
     * Sets Team a Aggregate Score.
     *
     * @maps TeamA_AggregateScore
     */
    public function setTeamAAggregateScore(?int $teamAAggregateScore): void
    {
        $this->teamAAggregateScore = $teamAAggregateScore;
    }

    /**
     * Returns Team B Id.
     */
    public function getTeamBId(): ?int
    {
        return $this->teamBId;
    }

    /**
     * Sets Team B Id.
     *
     * @maps TeamB_Id
     */
    public function setTeamBId(?int $teamBId): void
    {
        $this->teamBId = $teamBId;
    }

    /**
     * Returns Team B Aggregate Score.
     */
    public function getTeamBAggregateScore(): ?int
    {
        return $this->teamBAggregateScore;
    }

    /**
     * Sets Team B Aggregate Score.
     *
     * @maps TeamB_AggregateScore
     */
    public function setTeamBAggregateScore(?int $teamBAggregateScore): void
    {
        $this->teamBAggregateScore = $teamBAggregateScore;
    }

    /**
     * Returns Winning Team Id.
     */
    public function getWinningTeamId(): ?int
    {
        return $this->winningTeamId;
    }

    /**
     * Sets Winning Team Id.
     *
     * @maps WinningTeamId
     */
    public function setWinningTeamId(?int $winningTeamId): void
    {
        $this->winningTeamId = $winningTeamId;
    }

    /**
     * Returns Created.
     */
    public function getCreated(): ?string
    {
        return $this->created;
    }

    /**
     * Sets Created.
     *
     * @maps Created
     */
    public function setCreated(?string $created): void
    {
        $this->created = $created;
    }

    /**
     * Returns Updated.
     */
    public function getUpdated(): ?string
    {
        return $this->updated;
    }

    /**
     * Sets Updated.
     *
     * @maps Updated
     */
    public function setUpdated(?string $updated): void
    {
        $this->updated = $updated;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->teamAId)) {
            $json['TeamA_Id']             = $this->teamAId;
        }
        if (isset($this->teamAAggregateScore)) {
            $json['TeamA_AggregateScore'] = $this->teamAAggregateScore;
        }
        if (isset($this->teamBId)) {
            $json['TeamB_Id']             = $this->teamBId;
        }
        if (isset($this->teamBAggregateScore)) {
            $json['TeamB_AggregateScore'] = $this->teamBAggregateScore;
        }
        if (isset($this->winningTeamId)) {
            $json['WinningTeamId']        = $this->winningTeamId;
        }
        if (isset($this->created)) {
            $json['Created']              = $this->created;
        }
        if (isset($this->updated)) {
            $json['Updated']              = $this->updated;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
