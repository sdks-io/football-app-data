<?php

declare(strict_types=1);

/*
 * SoccerV3ScoresLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SoccerV3ScoresLib\Models;

use stdClass;

class TeamGame implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $statId;

    /**
     * @var int|null
     */
    private $seasonType;

    /**
     * @var int|null
     */
    private $season;

    /**
     * @var int|null
     */
    private $roundId;

    /**
     * @var int|null
     */
    private $teamId;

    /**
     * @var string|null
     */
    private $name;

    /**
     * @var string|null
     */
    private $team;

    /**
     * @var int|null
     */
    private $globalTeamId;

    /**
     * @var float|null
     */
    private $possession;

    /**
     * @var int|null
     */
    private $gameId;

    /**
     * @var int|null
     */
    private $opponentId;

    /**
     * @var string|null
     */
    private $opponent;

    /**
     * @var string|null
     */
    private $day;

    /**
     * @var string|null
     */
    private $dateTime;

    /**
     * @var string|null
     */
    private $homeOrAway;

    /**
     * @var bool|null
     */
    private $isGameOver;

    /**
     * @var int|null
     */
    private $globalGameId;

    /**
     * @var int|null
     */
    private $globalOpponentId;

    /**
     * @var string|null
     */
    private $updated;

    /**
     * @var string|null
     */
    private $updatedUtc;

    /**
     * @var int|null
     */
    private $games;

    /**
     * @var float|null
     */
    private $fantasyPoints;

    /**
     * @var float|null
     */
    private $fantasyPointsFanDuel;

    /**
     * @var float|null
     */
    private $fantasyPointsDraftKings;

    /**
     * @var float|null
     */
    private $fantasyPointsYahoo;

    /**
     * @var float|null
     */
    private $fantasyPointsMondogoal;

    /**
     * @var float|null
     */
    private $minutes;

    /**
     * @var float|null
     */
    private $goals;

    /**
     * @var float|null
     */
    private $assists;

    /**
     * @var float|null
     */
    private $shots;

    /**
     * @var float|null
     */
    private $shotsOnGoal;

    /**
     * @var float|null
     */
    private $yellowCards;

    /**
     * @var float|null
     */
    private $redCards;

    /**
     * @var float|null
     */
    private $yellowRedCards;

    /**
     * @var float|null
     */
    private $crosses;

    /**
     * @var float|null
     */
    private $tacklesWon;

    /**
     * @var float|null
     */
    private $interceptions;

    /**
     * @var float|null
     */
    private $ownGoals;

    /**
     * @var float|null
     */
    private $fouls;

    /**
     * @var float|null
     */
    private $fouled;

    /**
     * @var float|null
     */
    private $offsides;

    /**
     * @var float|null
     */
    private $passes;

    /**
     * @var float|null
     */
    private $passesCompleted;

    /**
     * @var float|null
     */
    private $lastManTackle;

    /**
     * @var float|null
     */
    private $cornersWon;

    /**
     * @var float|null
     */
    private $blockedShots;

    /**
     * @var float|null
     */
    private $touches;

    /**
     * @var float|null
     */
    private $defenderCleanSheets;

    /**
     * @var float|null
     */
    private $goalkeeperSaves;

    /**
     * @var float|null
     */
    private $goalkeeperGoalsAgainst;

    /**
     * @var float|null
     */
    private $goalkeeperSingleGoalAgainst;

    /**
     * @var float|null
     */
    private $goalkeeperCleanSheets;

    /**
     * @var float|null
     */
    private $goalkeeperWins;

    /**
     * @var float|null
     */
    private $penaltyKickGoals;

    /**
     * @var float|null
     */
    private $penaltyKickMisses;

    /**
     * @var float|null
     */
    private $penaltyKickSaves;

    /**
     * @var float|null
     */
    private $penaltiesWon;

    /**
     * @var float|null
     */
    private $penaltiesConceded;

    /**
     * @var float|null
     */
    private $score;

    /**
     * @var float|null
     */
    private $opponentScore;

    /**
     * @var float|null
     */
    private $tackles;

    /**
     * Returns Stat Id.
     */
    public function getStatId(): ?int
    {
        return $this->statId;
    }

    /**
     * Sets Stat Id.
     *
     * @maps StatId
     */
    public function setStatId(?int $statId): void
    {
        $this->statId = $statId;
    }

    /**
     * Returns Season Type.
     */
    public function getSeasonType(): ?int
    {
        return $this->seasonType;
    }

    /**
     * Sets Season Type.
     *
     * @maps SeasonType
     */
    public function setSeasonType(?int $seasonType): void
    {
        $this->seasonType = $seasonType;
    }

    /**
     * Returns Season.
     */
    public function getSeason(): ?int
    {
        return $this->season;
    }

    /**
     * Sets Season.
     *
     * @maps Season
     */
    public function setSeason(?int $season): void
    {
        $this->season = $season;
    }

    /**
     * Returns Round Id.
     */
    public function getRoundId(): ?int
    {
        return $this->roundId;
    }

    /**
     * Sets Round Id.
     *
     * @maps RoundId
     */
    public function setRoundId(?int $roundId): void
    {
        $this->roundId = $roundId;
    }

    /**
     * Returns Team Id.
     */
    public function getTeamId(): ?int
    {
        return $this->teamId;
    }

    /**
     * Sets Team Id.
     *
     * @maps TeamId
     */
    public function setTeamId(?int $teamId): void
    {
        $this->teamId = $teamId;
    }

    /**
     * Returns Name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @maps Name
     */
    public function setName(?string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Team.
     */
    public function getTeam(): ?string
    {
        return $this->team;
    }

    /**
     * Sets Team.
     *
     * @maps Team
     */
    public function setTeam(?string $team): void
    {
        $this->team = $team;
    }

    /**
     * Returns Global Team Id.
     */
    public function getGlobalTeamId(): ?int
    {
        return $this->globalTeamId;
    }

    /**
     * Sets Global Team Id.
     *
     * @maps GlobalTeamId
     */
    public function setGlobalTeamId(?int $globalTeamId): void
    {
        $this->globalTeamId = $globalTeamId;
    }

    /**
     * Returns Possession.
     */
    public function getPossession(): ?float
    {
        return $this->possession;
    }

    /**
     * Sets Possession.
     *
     * @maps Possession
     */
    public function setPossession(?float $possession): void
    {
        $this->possession = $possession;
    }

    /**
     * Returns Game Id.
     */
    public function getGameId(): ?int
    {
        return $this->gameId;
    }

    /**
     * Sets Game Id.
     *
     * @maps GameId
     */
    public function setGameId(?int $gameId): void
    {
        $this->gameId = $gameId;
    }

    /**
     * Returns Opponent Id.
     */
    public function getOpponentId(): ?int
    {
        return $this->opponentId;
    }

    /**
     * Sets Opponent Id.
     *
     * @maps OpponentId
     */
    public function setOpponentId(?int $opponentId): void
    {
        $this->opponentId = $opponentId;
    }

    /**
     * Returns Opponent.
     */
    public function getOpponent(): ?string
    {
        return $this->opponent;
    }

    /**
     * Sets Opponent.
     *
     * @maps Opponent
     */
    public function setOpponent(?string $opponent): void
    {
        $this->opponent = $opponent;
    }

    /**
     * Returns Day.
     */
    public function getDay(): ?string
    {
        return $this->day;
    }

    /**
     * Sets Day.
     *
     * @maps Day
     */
    public function setDay(?string $day): void
    {
        $this->day = $day;
    }

    /**
     * Returns Date Time.
     */
    public function getDateTime(): ?string
    {
        return $this->dateTime;
    }

    /**
     * Sets Date Time.
     *
     * @maps DateTime
     */
    public function setDateTime(?string $dateTime): void
    {
        $this->dateTime = $dateTime;
    }

    /**
     * Returns Home or Away.
     */
    public function getHomeOrAway(): ?string
    {
        return $this->homeOrAway;
    }

    /**
     * Sets Home or Away.
     *
     * @maps HomeOrAway
     */
    public function setHomeOrAway(?string $homeOrAway): void
    {
        $this->homeOrAway = $homeOrAway;
    }

    /**
     * Returns Is Game Over.
     */
    public function getIsGameOver(): ?bool
    {
        return $this->isGameOver;
    }

    /**
     * Sets Is Game Over.
     *
     * @maps IsGameOver
     */
    public function setIsGameOver(?bool $isGameOver): void
    {
        $this->isGameOver = $isGameOver;
    }

    /**
     * Returns Global Game Id.
     */
    public function getGlobalGameId(): ?int
    {
        return $this->globalGameId;
    }

    /**
     * Sets Global Game Id.
     *
     * @maps GlobalGameId
     */
    public function setGlobalGameId(?int $globalGameId): void
    {
        $this->globalGameId = $globalGameId;
    }

    /**
     * Returns Global Opponent Id.
     */
    public function getGlobalOpponentId(): ?int
    {
        return $this->globalOpponentId;
    }

    /**
     * Sets Global Opponent Id.
     *
     * @maps GlobalOpponentId
     */
    public function setGlobalOpponentId(?int $globalOpponentId): void
    {
        $this->globalOpponentId = $globalOpponentId;
    }

    /**
     * Returns Updated.
     */
    public function getUpdated(): ?string
    {
        return $this->updated;
    }

    /**
     * Sets Updated.
     *
     * @maps Updated
     */
    public function setUpdated(?string $updated): void
    {
        $this->updated = $updated;
    }

    /**
     * Returns Updated Utc.
     */
    public function getUpdatedUtc(): ?string
    {
        return $this->updatedUtc;
    }

    /**
     * Sets Updated Utc.
     *
     * @maps UpdatedUtc
     */
    public function setUpdatedUtc(?string $updatedUtc): void
    {
        $this->updatedUtc = $updatedUtc;
    }

    /**
     * Returns Games.
     */
    public function getGames(): ?int
    {
        return $this->games;
    }

    /**
     * Sets Games.
     *
     * @maps Games
     */
    public function setGames(?int $games): void
    {
        $this->games = $games;
    }

    /**
     * Returns Fantasy Points.
     */
    public function getFantasyPoints(): ?float
    {
        return $this->fantasyPoints;
    }

    /**
     * Sets Fantasy Points.
     *
     * @maps FantasyPoints
     */
    public function setFantasyPoints(?float $fantasyPoints): void
    {
        $this->fantasyPoints = $fantasyPoints;
    }

    /**
     * Returns Fantasy Points Fan Duel.
     */
    public function getFantasyPointsFanDuel(): ?float
    {
        return $this->fantasyPointsFanDuel;
    }

    /**
     * Sets Fantasy Points Fan Duel.
     *
     * @maps FantasyPointsFanDuel
     */
    public function setFantasyPointsFanDuel(?float $fantasyPointsFanDuel): void
    {
        $this->fantasyPointsFanDuel = $fantasyPointsFanDuel;
    }

    /**
     * Returns Fantasy Points Draft Kings.
     */
    public function getFantasyPointsDraftKings(): ?float
    {
        return $this->fantasyPointsDraftKings;
    }

    /**
     * Sets Fantasy Points Draft Kings.
     *
     * @maps FantasyPointsDraftKings
     */
    public function setFantasyPointsDraftKings(?float $fantasyPointsDraftKings): void
    {
        $this->fantasyPointsDraftKings = $fantasyPointsDraftKings;
    }

    /**
     * Returns Fantasy Points Yahoo.
     */
    public function getFantasyPointsYahoo(): ?float
    {
        return $this->fantasyPointsYahoo;
    }

    /**
     * Sets Fantasy Points Yahoo.
     *
     * @maps FantasyPointsYahoo
     */
    public function setFantasyPointsYahoo(?float $fantasyPointsYahoo): void
    {
        $this->fantasyPointsYahoo = $fantasyPointsYahoo;
    }

    /**
     * Returns Fantasy Points Mondogoal.
     */
    public function getFantasyPointsMondogoal(): ?float
    {
        return $this->fantasyPointsMondogoal;
    }

    /**
     * Sets Fantasy Points Mondogoal.
     *
     * @maps FantasyPointsMondogoal
     */
    public function setFantasyPointsMondogoal(?float $fantasyPointsMondogoal): void
    {
        $this->fantasyPointsMondogoal = $fantasyPointsMondogoal;
    }

    /**
     * Returns Minutes.
     */
    public function getMinutes(): ?float
    {
        return $this->minutes;
    }

    /**
     * Sets Minutes.
     *
     * @maps Minutes
     */
    public function setMinutes(?float $minutes): void
    {
        $this->minutes = $minutes;
    }

    /**
     * Returns Goals.
     */
    public function getGoals(): ?float
    {
        return $this->goals;
    }

    /**
     * Sets Goals.
     *
     * @maps Goals
     */
    public function setGoals(?float $goals): void
    {
        $this->goals = $goals;
    }

    /**
     * Returns Assists.
     */
    public function getAssists(): ?float
    {
        return $this->assists;
    }

    /**
     * Sets Assists.
     *
     * @maps Assists
     */
    public function setAssists(?float $assists): void
    {
        $this->assists = $assists;
    }

    /**
     * Returns Shots.
     */
    public function getShots(): ?float
    {
        return $this->shots;
    }

    /**
     * Sets Shots.
     *
     * @maps Shots
     */
    public function setShots(?float $shots): void
    {
        $this->shots = $shots;
    }

    /**
     * Returns Shots on Goal.
     */
    public function getShotsOnGoal(): ?float
    {
        return $this->shotsOnGoal;
    }

    /**
     * Sets Shots on Goal.
     *
     * @maps ShotsOnGoal
     */
    public function setShotsOnGoal(?float $shotsOnGoal): void
    {
        $this->shotsOnGoal = $shotsOnGoal;
    }

    /**
     * Returns Yellow Cards.
     */
    public function getYellowCards(): ?float
    {
        return $this->yellowCards;
    }

    /**
     * Sets Yellow Cards.
     *
     * @maps YellowCards
     */
    public function setYellowCards(?float $yellowCards): void
    {
        $this->yellowCards = $yellowCards;
    }

    /**
     * Returns Red Cards.
     */
    public function getRedCards(): ?float
    {
        return $this->redCards;
    }

    /**
     * Sets Red Cards.
     *
     * @maps RedCards
     */
    public function setRedCards(?float $redCards): void
    {
        $this->redCards = $redCards;
    }

    /**
     * Returns Yellow Red Cards.
     */
    public function getYellowRedCards(): ?float
    {
        return $this->yellowRedCards;
    }

    /**
     * Sets Yellow Red Cards.
     *
     * @maps YellowRedCards
     */
    public function setYellowRedCards(?float $yellowRedCards): void
    {
        $this->yellowRedCards = $yellowRedCards;
    }

    /**
     * Returns Crosses.
     */
    public function getCrosses(): ?float
    {
        return $this->crosses;
    }

    /**
     * Sets Crosses.
     *
     * @maps Crosses
     */
    public function setCrosses(?float $crosses): void
    {
        $this->crosses = $crosses;
    }

    /**
     * Returns Tackles Won.
     */
    public function getTacklesWon(): ?float
    {
        return $this->tacklesWon;
    }

    /**
     * Sets Tackles Won.
     *
     * @maps TacklesWon
     */
    public function setTacklesWon(?float $tacklesWon): void
    {
        $this->tacklesWon = $tacklesWon;
    }

    /**
     * Returns Interceptions.
     */
    public function getInterceptions(): ?float
    {
        return $this->interceptions;
    }

    /**
     * Sets Interceptions.
     *
     * @maps Interceptions
     */
    public function setInterceptions(?float $interceptions): void
    {
        $this->interceptions = $interceptions;
    }

    /**
     * Returns Own Goals.
     */
    public function getOwnGoals(): ?float
    {
        return $this->ownGoals;
    }

    /**
     * Sets Own Goals.
     *
     * @maps OwnGoals
     */
    public function setOwnGoals(?float $ownGoals): void
    {
        $this->ownGoals = $ownGoals;
    }

    /**
     * Returns Fouls.
     */
    public function getFouls(): ?float
    {
        return $this->fouls;
    }

    /**
     * Sets Fouls.
     *
     * @maps Fouls
     */
    public function setFouls(?float $fouls): void
    {
        $this->fouls = $fouls;
    }

    /**
     * Returns Fouled.
     */
    public function getFouled(): ?float
    {
        return $this->fouled;
    }

    /**
     * Sets Fouled.
     *
     * @maps Fouled
     */
    public function setFouled(?float $fouled): void
    {
        $this->fouled = $fouled;
    }

    /**
     * Returns Offsides.
     */
    public function getOffsides(): ?float
    {
        return $this->offsides;
    }

    /**
     * Sets Offsides.
     *
     * @maps Offsides
     */
    public function setOffsides(?float $offsides): void
    {
        $this->offsides = $offsides;
    }

    /**
     * Returns Passes.
     */
    public function getPasses(): ?float
    {
        return $this->passes;
    }

    /**
     * Sets Passes.
     *
     * @maps Passes
     */
    public function setPasses(?float $passes): void
    {
        $this->passes = $passes;
    }

    /**
     * Returns Passes Completed.
     */
    public function getPassesCompleted(): ?float
    {
        return $this->passesCompleted;
    }

    /**
     * Sets Passes Completed.
     *
     * @maps PassesCompleted
     */
    public function setPassesCompleted(?float $passesCompleted): void
    {
        $this->passesCompleted = $passesCompleted;
    }

    /**
     * Returns Last Man Tackle.
     */
    public function getLastManTackle(): ?float
    {
        return $this->lastManTackle;
    }

    /**
     * Sets Last Man Tackle.
     *
     * @maps LastManTackle
     */
    public function setLastManTackle(?float $lastManTackle): void
    {
        $this->lastManTackle = $lastManTackle;
    }

    /**
     * Returns Corners Won.
     */
    public function getCornersWon(): ?float
    {
        return $this->cornersWon;
    }

    /**
     * Sets Corners Won.
     *
     * @maps CornersWon
     */
    public function setCornersWon(?float $cornersWon): void
    {
        $this->cornersWon = $cornersWon;
    }

    /**
     * Returns Blocked Shots.
     */
    public function getBlockedShots(): ?float
    {
        return $this->blockedShots;
    }

    /**
     * Sets Blocked Shots.
     *
     * @maps BlockedShots
     */
    public function setBlockedShots(?float $blockedShots): void
    {
        $this->blockedShots = $blockedShots;
    }

    /**
     * Returns Touches.
     */
    public function getTouches(): ?float
    {
        return $this->touches;
    }

    /**
     * Sets Touches.
     *
     * @maps Touches
     */
    public function setTouches(?float $touches): void
    {
        $this->touches = $touches;
    }

    /**
     * Returns Defender Clean Sheets.
     */
    public function getDefenderCleanSheets(): ?float
    {
        return $this->defenderCleanSheets;
    }

    /**
     * Sets Defender Clean Sheets.
     *
     * @maps DefenderCleanSheets
     */
    public function setDefenderCleanSheets(?float $defenderCleanSheets): void
    {
        $this->defenderCleanSheets = $defenderCleanSheets;
    }

    /**
     * Returns Goalkeeper Saves.
     */
    public function getGoalkeeperSaves(): ?float
    {
        return $this->goalkeeperSaves;
    }

    /**
     * Sets Goalkeeper Saves.
     *
     * @maps GoalkeeperSaves
     */
    public function setGoalkeeperSaves(?float $goalkeeperSaves): void
    {
        $this->goalkeeperSaves = $goalkeeperSaves;
    }

    /**
     * Returns Goalkeeper Goals Against.
     */
    public function getGoalkeeperGoalsAgainst(): ?float
    {
        return $this->goalkeeperGoalsAgainst;
    }

    /**
     * Sets Goalkeeper Goals Against.
     *
     * @maps GoalkeeperGoalsAgainst
     */
    public function setGoalkeeperGoalsAgainst(?float $goalkeeperGoalsAgainst): void
    {
        $this->goalkeeperGoalsAgainst = $goalkeeperGoalsAgainst;
    }

    /**
     * Returns Goalkeeper Single Goal Against.
     */
    public function getGoalkeeperSingleGoalAgainst(): ?float
    {
        return $this->goalkeeperSingleGoalAgainst;
    }

    /**
     * Sets Goalkeeper Single Goal Against.
     *
     * @maps GoalkeeperSingleGoalAgainst
     */
    public function setGoalkeeperSingleGoalAgainst(?float $goalkeeperSingleGoalAgainst): void
    {
        $this->goalkeeperSingleGoalAgainst = $goalkeeperSingleGoalAgainst;
    }

    /**
     * Returns Goalkeeper Clean Sheets.
     */
    public function getGoalkeeperCleanSheets(): ?float
    {
        return $this->goalkeeperCleanSheets;
    }

    /**
     * Sets Goalkeeper Clean Sheets.
     *
     * @maps GoalkeeperCleanSheets
     */
    public function setGoalkeeperCleanSheets(?float $goalkeeperCleanSheets): void
    {
        $this->goalkeeperCleanSheets = $goalkeeperCleanSheets;
    }

    /**
     * Returns Goalkeeper Wins.
     */
    public function getGoalkeeperWins(): ?float
    {
        return $this->goalkeeperWins;
    }

    /**
     * Sets Goalkeeper Wins.
     *
     * @maps GoalkeeperWins
     */
    public function setGoalkeeperWins(?float $goalkeeperWins): void
    {
        $this->goalkeeperWins = $goalkeeperWins;
    }

    /**
     * Returns Penalty Kick Goals.
     */
    public function getPenaltyKickGoals(): ?float
    {
        return $this->penaltyKickGoals;
    }

    /**
     * Sets Penalty Kick Goals.
     *
     * @maps PenaltyKickGoals
     */
    public function setPenaltyKickGoals(?float $penaltyKickGoals): void
    {
        $this->penaltyKickGoals = $penaltyKickGoals;
    }

    /**
     * Returns Penalty Kick Misses.
     */
    public function getPenaltyKickMisses(): ?float
    {
        return $this->penaltyKickMisses;
    }

    /**
     * Sets Penalty Kick Misses.
     *
     * @maps PenaltyKickMisses
     */
    public function setPenaltyKickMisses(?float $penaltyKickMisses): void
    {
        $this->penaltyKickMisses = $penaltyKickMisses;
    }

    /**
     * Returns Penalty Kick Saves.
     */
    public function getPenaltyKickSaves(): ?float
    {
        return $this->penaltyKickSaves;
    }

    /**
     * Sets Penalty Kick Saves.
     *
     * @maps PenaltyKickSaves
     */
    public function setPenaltyKickSaves(?float $penaltyKickSaves): void
    {
        $this->penaltyKickSaves = $penaltyKickSaves;
    }

    /**
     * Returns Penalties Won.
     */
    public function getPenaltiesWon(): ?float
    {
        return $this->penaltiesWon;
    }

    /**
     * Sets Penalties Won.
     *
     * @maps PenaltiesWon
     */
    public function setPenaltiesWon(?float $penaltiesWon): void
    {
        $this->penaltiesWon = $penaltiesWon;
    }

    /**
     * Returns Penalties Conceded.
     */
    public function getPenaltiesConceded(): ?float
    {
        return $this->penaltiesConceded;
    }

    /**
     * Sets Penalties Conceded.
     *
     * @maps PenaltiesConceded
     */
    public function setPenaltiesConceded(?float $penaltiesConceded): void
    {
        $this->penaltiesConceded = $penaltiesConceded;
    }

    /**
     * Returns Score.
     */
    public function getScore(): ?float
    {
        return $this->score;
    }

    /**
     * Sets Score.
     *
     * @maps Score
     */
    public function setScore(?float $score): void
    {
        $this->score = $score;
    }

    /**
     * Returns Opponent Score.
     */
    public function getOpponentScore(): ?float
    {
        return $this->opponentScore;
    }

    /**
     * Sets Opponent Score.
     *
     * @maps OpponentScore
     */
    public function setOpponentScore(?float $opponentScore): void
    {
        $this->opponentScore = $opponentScore;
    }

    /**
     * Returns Tackles.
     */
    public function getTackles(): ?float
    {
        return $this->tackles;
    }

    /**
     * Sets Tackles.
     *
     * @maps Tackles
     */
    public function setTackles(?float $tackles): void
    {
        $this->tackles = $tackles;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->statId)) {
            $json['StatId']                      = $this->statId;
        }
        if (isset($this->seasonType)) {
            $json['SeasonType']                  = $this->seasonType;
        }
        if (isset($this->season)) {
            $json['Season']                      = $this->season;
        }
        if (isset($this->roundId)) {
            $json['RoundId']                     = $this->roundId;
        }
        if (isset($this->teamId)) {
            $json['TeamId']                      = $this->teamId;
        }
        if (isset($this->name)) {
            $json['Name']                        = $this->name;
        }
        if (isset($this->team)) {
            $json['Team']                        = $this->team;
        }
        if (isset($this->globalTeamId)) {
            $json['GlobalTeamId']                = $this->globalTeamId;
        }
        if (isset($this->possession)) {
            $json['Possession']                  = $this->possession;
        }
        if (isset($this->gameId)) {
            $json['GameId']                      = $this->gameId;
        }
        if (isset($this->opponentId)) {
            $json['OpponentId']                  = $this->opponentId;
        }
        if (isset($this->opponent)) {
            $json['Opponent']                    = $this->opponent;
        }
        if (isset($this->day)) {
            $json['Day']                         = $this->day;
        }
        if (isset($this->dateTime)) {
            $json['DateTime']                    = $this->dateTime;
        }
        if (isset($this->homeOrAway)) {
            $json['HomeOrAway']                  = $this->homeOrAway;
        }
        if (isset($this->isGameOver)) {
            $json['IsGameOver']                  = $this->isGameOver;
        }
        if (isset($this->globalGameId)) {
            $json['GlobalGameId']                = $this->globalGameId;
        }
        if (isset($this->globalOpponentId)) {
            $json['GlobalOpponentId']            = $this->globalOpponentId;
        }
        if (isset($this->updated)) {
            $json['Updated']                     = $this->updated;
        }
        if (isset($this->updatedUtc)) {
            $json['UpdatedUtc']                  = $this->updatedUtc;
        }
        if (isset($this->games)) {
            $json['Games']                       = $this->games;
        }
        if (isset($this->fantasyPoints)) {
            $json['FantasyPoints']               = $this->fantasyPoints;
        }
        if (isset($this->fantasyPointsFanDuel)) {
            $json['FantasyPointsFanDuel']        = $this->fantasyPointsFanDuel;
        }
        if (isset($this->fantasyPointsDraftKings)) {
            $json['FantasyPointsDraftKings']     = $this->fantasyPointsDraftKings;
        }
        if (isset($this->fantasyPointsYahoo)) {
            $json['FantasyPointsYahoo']          = $this->fantasyPointsYahoo;
        }
        if (isset($this->fantasyPointsMondogoal)) {
            $json['FantasyPointsMondogoal']      = $this->fantasyPointsMondogoal;
        }
        if (isset($this->minutes)) {
            $json['Minutes']                     = $this->minutes;
        }
        if (isset($this->goals)) {
            $json['Goals']                       = $this->goals;
        }
        if (isset($this->assists)) {
            $json['Assists']                     = $this->assists;
        }
        if (isset($this->shots)) {
            $json['Shots']                       = $this->shots;
        }
        if (isset($this->shotsOnGoal)) {
            $json['ShotsOnGoal']                 = $this->shotsOnGoal;
        }
        if (isset($this->yellowCards)) {
            $json['YellowCards']                 = $this->yellowCards;
        }
        if (isset($this->redCards)) {
            $json['RedCards']                    = $this->redCards;
        }
        if (isset($this->yellowRedCards)) {
            $json['YellowRedCards']              = $this->yellowRedCards;
        }
        if (isset($this->crosses)) {
            $json['Crosses']                     = $this->crosses;
        }
        if (isset($this->tacklesWon)) {
            $json['TacklesWon']                  = $this->tacklesWon;
        }
        if (isset($this->interceptions)) {
            $json['Interceptions']               = $this->interceptions;
        }
        if (isset($this->ownGoals)) {
            $json['OwnGoals']                    = $this->ownGoals;
        }
        if (isset($this->fouls)) {
            $json['Fouls']                       = $this->fouls;
        }
        if (isset($this->fouled)) {
            $json['Fouled']                      = $this->fouled;
        }
        if (isset($this->offsides)) {
            $json['Offsides']                    = $this->offsides;
        }
        if (isset($this->passes)) {
            $json['Passes']                      = $this->passes;
        }
        if (isset($this->passesCompleted)) {
            $json['PassesCompleted']             = $this->passesCompleted;
        }
        if (isset($this->lastManTackle)) {
            $json['LastManTackle']               = $this->lastManTackle;
        }
        if (isset($this->cornersWon)) {
            $json['CornersWon']                  = $this->cornersWon;
        }
        if (isset($this->blockedShots)) {
            $json['BlockedShots']                = $this->blockedShots;
        }
        if (isset($this->touches)) {
            $json['Touches']                     = $this->touches;
        }
        if (isset($this->defenderCleanSheets)) {
            $json['DefenderCleanSheets']         = $this->defenderCleanSheets;
        }
        if (isset($this->goalkeeperSaves)) {
            $json['GoalkeeperSaves']             = $this->goalkeeperSaves;
        }
        if (isset($this->goalkeeperGoalsAgainst)) {
            $json['GoalkeeperGoalsAgainst']      = $this->goalkeeperGoalsAgainst;
        }
        if (isset($this->goalkeeperSingleGoalAgainst)) {
            $json['GoalkeeperSingleGoalAgainst'] = $this->goalkeeperSingleGoalAgainst;
        }
        if (isset($this->goalkeeperCleanSheets)) {
            $json['GoalkeeperCleanSheets']       = $this->goalkeeperCleanSheets;
        }
        if (isset($this->goalkeeperWins)) {
            $json['GoalkeeperWins']              = $this->goalkeeperWins;
        }
        if (isset($this->penaltyKickGoals)) {
            $json['PenaltyKickGoals']            = $this->penaltyKickGoals;
        }
        if (isset($this->penaltyKickMisses)) {
            $json['PenaltyKickMisses']           = $this->penaltyKickMisses;
        }
        if (isset($this->penaltyKickSaves)) {
            $json['PenaltyKickSaves']            = $this->penaltyKickSaves;
        }
        if (isset($this->penaltiesWon)) {
            $json['PenaltiesWon']                = $this->penaltiesWon;
        }
        if (isset($this->penaltiesConceded)) {
            $json['PenaltiesConceded']           = $this->penaltiesConceded;
        }
        if (isset($this->score)) {
            $json['Score']                       = $this->score;
        }
        if (isset($this->opponentScore)) {
            $json['OpponentScore']               = $this->opponentScore;
        }
        if (isset($this->tackles)) {
            $json['Tackles']                     = $this->tackles;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
