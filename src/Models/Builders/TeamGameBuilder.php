<?php

declare(strict_types=1);

/*
 * SoccerV3ScoresLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SoccerV3ScoresLib\Models\Builders;

use Core\Utils\CoreHelper;
use SoccerV3ScoresLib\Models\TeamGame;

/**
 * Builder for model TeamGame
 *
 * @see TeamGame
 */
class TeamGameBuilder
{
    /**
     * @var TeamGame
     */
    private $instance;

    private function __construct(TeamGame $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new team game Builder object.
     */
    public static function init(): self
    {
        return new self(new TeamGame());
    }

    /**
     * Sets stat id field.
     */
    public function statId(?int $value): self
    {
        $this->instance->setStatId($value);
        return $this;
    }

    /**
     * Sets season type field.
     */
    public function seasonType(?int $value): self
    {
        $this->instance->setSeasonType($value);
        return $this;
    }

    /**
     * Sets season field.
     */
    public function season(?int $value): self
    {
        $this->instance->setSeason($value);
        return $this;
    }

    /**
     * Sets round id field.
     */
    public function roundId(?int $value): self
    {
        $this->instance->setRoundId($value);
        return $this;
    }

    /**
     * Sets team id field.
     */
    public function teamId(?int $value): self
    {
        $this->instance->setTeamId($value);
        return $this;
    }

    /**
     * Sets name field.
     */
    public function name(?string $value): self
    {
        $this->instance->setName($value);
        return $this;
    }

    /**
     * Sets team field.
     */
    public function team(?string $value): self
    {
        $this->instance->setTeam($value);
        return $this;
    }

    /**
     * Sets global team id field.
     */
    public function globalTeamId(?int $value): self
    {
        $this->instance->setGlobalTeamId($value);
        return $this;
    }

    /**
     * Sets possession field.
     */
    public function possession(?float $value): self
    {
        $this->instance->setPossession($value);
        return $this;
    }

    /**
     * Sets game id field.
     */
    public function gameId(?int $value): self
    {
        $this->instance->setGameId($value);
        return $this;
    }

    /**
     * Sets opponent id field.
     */
    public function opponentId(?int $value): self
    {
        $this->instance->setOpponentId($value);
        return $this;
    }

    /**
     * Sets opponent field.
     */
    public function opponent(?string $value): self
    {
        $this->instance->setOpponent($value);
        return $this;
    }

    /**
     * Sets day field.
     */
    public function day(?string $value): self
    {
        $this->instance->setDay($value);
        return $this;
    }

    /**
     * Sets date time field.
     */
    public function dateTime(?string $value): self
    {
        $this->instance->setDateTime($value);
        return $this;
    }

    /**
     * Sets home or away field.
     */
    public function homeOrAway(?string $value): self
    {
        $this->instance->setHomeOrAway($value);
        return $this;
    }

    /**
     * Sets is game over field.
     */
    public function isGameOver(?bool $value): self
    {
        $this->instance->setIsGameOver($value);
        return $this;
    }

    /**
     * Sets global game id field.
     */
    public function globalGameId(?int $value): self
    {
        $this->instance->setGlobalGameId($value);
        return $this;
    }

    /**
     * Sets global opponent id field.
     */
    public function globalOpponentId(?int $value): self
    {
        $this->instance->setGlobalOpponentId($value);
        return $this;
    }

    /**
     * Sets updated field.
     */
    public function updated(?string $value): self
    {
        $this->instance->setUpdated($value);
        return $this;
    }

    /**
     * Sets updated utc field.
     */
    public function updatedUtc(?string $value): self
    {
        $this->instance->setUpdatedUtc($value);
        return $this;
    }

    /**
     * Sets games field.
     */
    public function games(?int $value): self
    {
        $this->instance->setGames($value);
        return $this;
    }

    /**
     * Sets fantasy points field.
     */
    public function fantasyPoints(?float $value): self
    {
        $this->instance->setFantasyPoints($value);
        return $this;
    }

    /**
     * Sets fantasy points fan duel field.
     */
    public function fantasyPointsFanDuel(?float $value): self
    {
        $this->instance->setFantasyPointsFanDuel($value);
        return $this;
    }

    /**
     * Sets fantasy points draft kings field.
     */
    public function fantasyPointsDraftKings(?float $value): self
    {
        $this->instance->setFantasyPointsDraftKings($value);
        return $this;
    }

    /**
     * Sets fantasy points yahoo field.
     */
    public function fantasyPointsYahoo(?float $value): self
    {
        $this->instance->setFantasyPointsYahoo($value);
        return $this;
    }

    /**
     * Sets fantasy points mondogoal field.
     */
    public function fantasyPointsMondogoal(?float $value): self
    {
        $this->instance->setFantasyPointsMondogoal($value);
        return $this;
    }

    /**
     * Sets minutes field.
     */
    public function minutes(?float $value): self
    {
        $this->instance->setMinutes($value);
        return $this;
    }

    /**
     * Sets goals field.
     */
    public function goals(?float $value): self
    {
        $this->instance->setGoals($value);
        return $this;
    }

    /**
     * Sets assists field.
     */
    public function assists(?float $value): self
    {
        $this->instance->setAssists($value);
        return $this;
    }

    /**
     * Sets shots field.
     */
    public function shots(?float $value): self
    {
        $this->instance->setShots($value);
        return $this;
    }

    /**
     * Sets shots on goal field.
     */
    public function shotsOnGoal(?float $value): self
    {
        $this->instance->setShotsOnGoal($value);
        return $this;
    }

    /**
     * Sets yellow cards field.
     */
    public function yellowCards(?float $value): self
    {
        $this->instance->setYellowCards($value);
        return $this;
    }

    /**
     * Sets red cards field.
     */
    public function redCards(?float $value): self
    {
        $this->instance->setRedCards($value);
        return $this;
    }

    /**
     * Sets yellow red cards field.
     */
    public function yellowRedCards(?float $value): self
    {
        $this->instance->setYellowRedCards($value);
        return $this;
    }

    /**
     * Sets crosses field.
     */
    public function crosses(?float $value): self
    {
        $this->instance->setCrosses($value);
        return $this;
    }

    /**
     * Sets tackles won field.
     */
    public function tacklesWon(?float $value): self
    {
        $this->instance->setTacklesWon($value);
        return $this;
    }

    /**
     * Sets interceptions field.
     */
    public function interceptions(?float $value): self
    {
        $this->instance->setInterceptions($value);
        return $this;
    }

    /**
     * Sets own goals field.
     */
    public function ownGoals(?float $value): self
    {
        $this->instance->setOwnGoals($value);
        return $this;
    }

    /**
     * Sets fouls field.
     */
    public function fouls(?float $value): self
    {
        $this->instance->setFouls($value);
        return $this;
    }

    /**
     * Sets fouled field.
     */
    public function fouled(?float $value): self
    {
        $this->instance->setFouled($value);
        return $this;
    }

    /**
     * Sets offsides field.
     */
    public function offsides(?float $value): self
    {
        $this->instance->setOffsides($value);
        return $this;
    }

    /**
     * Sets passes field.
     */
    public function passes(?float $value): self
    {
        $this->instance->setPasses($value);
        return $this;
    }

    /**
     * Sets passes completed field.
     */
    public function passesCompleted(?float $value): self
    {
        $this->instance->setPassesCompleted($value);
        return $this;
    }

    /**
     * Sets last man tackle field.
     */
    public function lastManTackle(?float $value): self
    {
        $this->instance->setLastManTackle($value);
        return $this;
    }

    /**
     * Sets corners won field.
     */
    public function cornersWon(?float $value): self
    {
        $this->instance->setCornersWon($value);
        return $this;
    }

    /**
     * Sets blocked shots field.
     */
    public function blockedShots(?float $value): self
    {
        $this->instance->setBlockedShots($value);
        return $this;
    }

    /**
     * Sets touches field.
     */
    public function touches(?float $value): self
    {
        $this->instance->setTouches($value);
        return $this;
    }

    /**
     * Sets defender clean sheets field.
     */
    public function defenderCleanSheets(?float $value): self
    {
        $this->instance->setDefenderCleanSheets($value);
        return $this;
    }

    /**
     * Sets goalkeeper saves field.
     */
    public function goalkeeperSaves(?float $value): self
    {
        $this->instance->setGoalkeeperSaves($value);
        return $this;
    }

    /**
     * Sets goalkeeper goals against field.
     */
    public function goalkeeperGoalsAgainst(?float $value): self
    {
        $this->instance->setGoalkeeperGoalsAgainst($value);
        return $this;
    }

    /**
     * Sets goalkeeper single goal against field.
     */
    public function goalkeeperSingleGoalAgainst(?float $value): self
    {
        $this->instance->setGoalkeeperSingleGoalAgainst($value);
        return $this;
    }

    /**
     * Sets goalkeeper clean sheets field.
     */
    public function goalkeeperCleanSheets(?float $value): self
    {
        $this->instance->setGoalkeeperCleanSheets($value);
        return $this;
    }

    /**
     * Sets goalkeeper wins field.
     */
    public function goalkeeperWins(?float $value): self
    {
        $this->instance->setGoalkeeperWins($value);
        return $this;
    }

    /**
     * Sets penalty kick goals field.
     */
    public function penaltyKickGoals(?float $value): self
    {
        $this->instance->setPenaltyKickGoals($value);
        return $this;
    }

    /**
     * Sets penalty kick misses field.
     */
    public function penaltyKickMisses(?float $value): self
    {
        $this->instance->setPenaltyKickMisses($value);
        return $this;
    }

    /**
     * Sets penalty kick saves field.
     */
    public function penaltyKickSaves(?float $value): self
    {
        $this->instance->setPenaltyKickSaves($value);
        return $this;
    }

    /**
     * Sets penalties won field.
     */
    public function penaltiesWon(?float $value): self
    {
        $this->instance->setPenaltiesWon($value);
        return $this;
    }

    /**
     * Sets penalties conceded field.
     */
    public function penaltiesConceded(?float $value): self
    {
        $this->instance->setPenaltiesConceded($value);
        return $this;
    }

    /**
     * Sets score field.
     */
    public function score(?float $value): self
    {
        $this->instance->setScore($value);
        return $this;
    }

    /**
     * Sets opponent score field.
     */
    public function opponentScore(?float $value): self
    {
        $this->instance->setOpponentScore($value);
        return $this;
    }

    /**
     * Sets tackles field.
     */
    public function tackles(?float $value): self
    {
        $this->instance->setTackles($value);
        return $this;
    }

    /**
     * Initializes a new team game object.
     */
    public function build(): TeamGame
    {
        return CoreHelper::clone($this->instance);
    }
}
