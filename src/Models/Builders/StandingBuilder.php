<?php

declare(strict_types=1);

/*
 * SoccerV3ScoresLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SoccerV3ScoresLib\Models\Builders;

use Core\Utils\CoreHelper;
use SoccerV3ScoresLib\Models\Standing;

/**
 * Builder for model Standing
 *
 * @see Standing
 */
class StandingBuilder
{
    /**
     * @var Standing
     */
    private $instance;

    private function __construct(Standing $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new standing Builder object.
     */
    public static function init(): self
    {
        return new self(new Standing());
    }

    /**
     * Sets standing id field.
     */
    public function standingId(?int $value): self
    {
        $this->instance->setStandingId($value);
        return $this;
    }

    /**
     * Sets round id field.
     */
    public function roundId(?int $value): self
    {
        $this->instance->setRoundId($value);
        return $this;
    }

    /**
     * Sets team id field.
     */
    public function teamId(?int $value): self
    {
        $this->instance->setTeamId($value);
        return $this;
    }

    /**
     * Sets name field.
     */
    public function name(?string $value): self
    {
        $this->instance->setName($value);
        return $this;
    }

    /**
     * Sets short name field.
     */
    public function shortName(?string $value): self
    {
        $this->instance->setShortName($value);
        return $this;
    }

    /**
     * Sets scope field.
     */
    public function scope(?string $value): self
    {
        $this->instance->setScope($value);
        return $this;
    }

    /**
     * Sets order field.
     */
    public function order(?int $value): self
    {
        $this->instance->setOrder($value);
        return $this;
    }

    /**
     * Sets games field.
     */
    public function games(?int $value): self
    {
        $this->instance->setGames($value);
        return $this;
    }

    /**
     * Sets wins field.
     */
    public function wins(?int $value): self
    {
        $this->instance->setWins($value);
        return $this;
    }

    /**
     * Sets losses field.
     */
    public function losses(?int $value): self
    {
        $this->instance->setLosses($value);
        return $this;
    }

    /**
     * Sets draws field.
     */
    public function draws(?int $value): self
    {
        $this->instance->setDraws($value);
        return $this;
    }

    /**
     * Sets goals scored field.
     */
    public function goalsScored(?int $value): self
    {
        $this->instance->setGoalsScored($value);
        return $this;
    }

    /**
     * Sets goals against field.
     */
    public function goalsAgainst(?int $value): self
    {
        $this->instance->setGoalsAgainst($value);
        return $this;
    }

    /**
     * Sets goals differential field.
     */
    public function goalsDifferential(?int $value): self
    {
        $this->instance->setGoalsDifferential($value);
        return $this;
    }

    /**
     * Sets points field.
     */
    public function points(?int $value): self
    {
        $this->instance->setPoints($value);
        return $this;
    }

    /**
     * Sets group field.
     */
    public function group(?string $value): self
    {
        $this->instance->setGroup($value);
        return $this;
    }

    /**
     * Sets global team id field.
     */
    public function globalTeamID(?int $value): self
    {
        $this->instance->setGlobalTeamID($value);
        return $this;
    }

    /**
     * Initializes a new standing object.
     */
    public function build(): Standing
    {
        return CoreHelper::clone($this->instance);
    }
}
