<?php

declare(strict_types=1);

/*
 * SoccerV3ScoresLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SoccerV3ScoresLib\Models\Builders;

use Core\Utils\CoreHelper;
use SoccerV3ScoresLib\Models\Player;

/**
 * Builder for model Player
 *
 * @see Player
 */
class PlayerBuilder
{
    /**
     * @var Player
     */
    private $instance;

    private function __construct(Player $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new player Builder object.
     */
    public static function init(): self
    {
        return new self(new Player());
    }

    /**
     * Sets player id field.
     */
    public function playerId(?int $value): self
    {
        $this->instance->setPlayerId($value);
        return $this;
    }

    /**
     * Sets first name field.
     */
    public function firstName(?string $value): self
    {
        $this->instance->setFirstName($value);
        return $this;
    }

    /**
     * Sets last name field.
     */
    public function lastName(?string $value): self
    {
        $this->instance->setLastName($value);
        return $this;
    }

    /**
     * Sets common name field.
     */
    public function commonName(?string $value): self
    {
        $this->instance->setCommonName($value);
        return $this;
    }

    /**
     * Sets short name field.
     */
    public function shortName(?string $value): self
    {
        $this->instance->setShortName($value);
        return $this;
    }

    /**
     * Sets position field.
     */
    public function position(?string $value): self
    {
        $this->instance->setPosition($value);
        return $this;
    }

    /**
     * Sets position category field.
     */
    public function positionCategory(?string $value): self
    {
        $this->instance->setPositionCategory($value);
        return $this;
    }

    /**
     * Sets jersey field.
     */
    public function jersey(?int $value): self
    {
        $this->instance->setJersey($value);
        return $this;
    }

    /**
     * Sets foot field.
     */
    public function foot(?string $value): self
    {
        $this->instance->setFoot($value);
        return $this;
    }

    /**
     * Sets height field.
     */
    public function height(?int $value): self
    {
        $this->instance->setHeight($value);
        return $this;
    }

    /**
     * Sets weight field.
     */
    public function weight(?int $value): self
    {
        $this->instance->setWeight($value);
        return $this;
    }

    /**
     * Sets gender field.
     */
    public function gender(?string $value): self
    {
        $this->instance->setGender($value);
        return $this;
    }

    /**
     * Sets birth date field.
     */
    public function birthDate(?string $value): self
    {
        $this->instance->setBirthDate($value);
        return $this;
    }

    /**
     * Sets birth city field.
     */
    public function birthCity(?string $value): self
    {
        $this->instance->setBirthCity($value);
        return $this;
    }

    /**
     * Sets birth country field.
     */
    public function birthCountry(?string $value): self
    {
        $this->instance->setBirthCountry($value);
        return $this;
    }

    /**
     * Sets nationality field.
     */
    public function nationality(?string $value): self
    {
        $this->instance->setNationality($value);
        return $this;
    }

    /**
     * Sets injury status field.
     */
    public function injuryStatus(?string $value): self
    {
        $this->instance->setInjuryStatus($value);
        return $this;
    }

    /**
     * Sets injury body part field.
     */
    public function injuryBodyPart(?string $value): self
    {
        $this->instance->setInjuryBodyPart($value);
        return $this;
    }

    /**
     * Sets injury notes field.
     */
    public function injuryNotes(?string $value): self
    {
        $this->instance->setInjuryNotes($value);
        return $this;
    }

    /**
     * Sets injury start date field.
     */
    public function injuryStartDate(?string $value): self
    {
        $this->instance->setInjuryStartDate($value);
        return $this;
    }

    /**
     * Sets updated field.
     */
    public function updated(?string $value): self
    {
        $this->instance->setUpdated($value);
        return $this;
    }

    /**
     * Sets photo url field.
     */
    public function photoUrl(?string $value): self
    {
        $this->instance->setPhotoUrl($value);
        return $this;
    }

    /**
     * Sets roto wire player id field.
     */
    public function rotoWirePlayerID(?int $value): self
    {
        $this->instance->setRotoWirePlayerID($value);
        return $this;
    }

    /**
     * Sets draft kings position field.
     */
    public function draftKingsPosition(?string $value): self
    {
        $this->instance->setDraftKingsPosition($value);
        return $this;
    }

    /**
     * Sets usa today player id field.
     */
    public function usaTodayPlayerID(?int $value): self
    {
        $this->instance->setUsaTodayPlayerID($value);
        return $this;
    }

    /**
     * Sets usa today headshot url field.
     */
    public function usaTodayHeadshotUrl(?string $value): self
    {
        $this->instance->setUsaTodayHeadshotUrl($value);
        return $this;
    }

    /**
     * Sets usa today headshot no background url field.
     */
    public function usaTodayHeadshotNoBackgroundUrl(?string $value): self
    {
        $this->instance->setUsaTodayHeadshotNoBackgroundUrl($value);
        return $this;
    }

    /**
     * Sets usa today headshot updated field.
     */
    public function usaTodayHeadshotUpdated(?string $value): self
    {
        $this->instance->setUsaTodayHeadshotUpdated($value);
        return $this;
    }

    /**
     * Sets usa today headshot no background updated field.
     */
    public function usaTodayHeadshotNoBackgroundUpdated(?string $value): self
    {
        $this->instance->setUsaTodayHeadshotNoBackgroundUpdated($value);
        return $this;
    }

    /**
     * Initializes a new player object.
     */
    public function build(): Player
    {
        return CoreHelper::clone($this->instance);
    }
}
